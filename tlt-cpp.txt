Introduction:
		Hello user!
	Welcome to the TLT library (the-little-things)! Here, you can use the functions I created for you
	to use. I had created this library because I thought there could be an easier way of doing things like std::cout; or 		
	std::cin; and wanted something better. I hope you find this library helpful!

- mrcodecat2077


Demonstrations:
	1. tlt::give()
		#include <tlt.hpp>
		void main() {
			tlt::give("I was printed from tlt::give()!");
		}

	2. tlt::get()
		#include <tlt.hpp>
		void main() {
			std::string i;
			std::string thing;
			// with optional message
			tlt::get(i, "Please enter stuff");
			// without optional message
			tlt::get(thing);
		}

	3. tlt::givebool()
			#include <tlt.hpp>
			void main() {
				// with "int" (1 = true, 0 = false)
				tlt::givebool(1); // prints true
				tlt::givebool(0); // prints false
				// with "bool"
				tlt::givebool(true); // prints true
				tlt::givebool(false); // prints false
			}

	4. tlt::as_str()
		#include <tlt.hpp>
		void main()	 {
			std::cout << tlt::as_str(1); // prints 1 as a string
		}

	5. tlt::appendto()
		#include <tlt.hpp>
		void main() {
			std::vector<std::string> myvec = {"object 1", "object 2"};
			tlt::appendto(myvec, "object 3");
		}

	6. tlt::end()
		#include <tlt.hpp>
		void main {
			std::cout << "Line 1" << tlt::end();
			std::cout << "Line 2";
		}

	7. tlt::randint()
		#include <tlt.hpp>
		void main() {
			std::cout << tlt::randint(12, 14); // prints a random number between (and including) 12 and 14
		}

	8. tlt::mapfind()
		#include <tlt.hpp>
		void main() {
			std::map<std::string, std::string> myMap = {
            		    {"key 1", "value 1"},
    	        	    {"key 2", "value 2"},
    		            {"key 3", "value 3"},
    		            {"key 4", "value 4"},
    		            {"key 5", "value 5"},
    		            {"key 6", "value 6"},
    		            {"key 7", "value 7"},
    		            {"key 8", "value 8"},
    		            {"key 9", "value 9"},
    		            {"key 10", "value 10"}
			};
			std::cout << tlt::mapfind(myMap, "key 1"); // ought to print "value 1"
		}

	9. tlt::as_int()
		#include <tlt.hpp>
		void main() {
			std::cout << tlt::as_int("1"); // prints 1 as an "int"
		}

	10. tlt::as_bool()
		#include <tlt.hpp>
		void main() {
			std::cout << tlt::as_bool("true"); // prints true as 1, false as 0
		}

	11. tlt::sum()
		#include <tlt.hpp>
		void main() {
			std::vector<int> myvec = {1,2,3};
			std::cout << tlt::sum(myvec); // prints 6

	12. tlt::randchoice()
		#include <tlt.hpp>
		void main() {
			std::vector<int> nums = {1, 2, 3};
			std::cout << tlt::randchoice(nums); // Prints a random number from 1 to 3 (includes 1 and 3)
		}
	13. tlt::range()
		#include <tlt.hpp>
		void main {
			std::vector<double> 1to10 = tlt::range(1, 10); // range is inclusive start and end. Int type works too
		}
	14. tlt::pmtde()
		#include <tlt.hpp>
		void main {
			std::vector<double> 2pmtde1 = tlt::pmtde(2, 1); /* pmtde stands for Plus-Minus-Times-Divided_by-Exponents. in 
			2pmtde1, there is {3, 1, 2, 2, 2}. */
		}
	15. tlt::round()
		#include <tlt.hpp>
		void main() {
			std::cout << tlt::round(1.254, 2); // prints 1.3
		}
	16. tlt::pointer()
		#include <tlt.hpp>
		void main() {
			double mynum = 1.23;
			double pointermynum = tlt::pointer(mynum);
		}
	17. tlt::minmax()
		#include <tlt.hpp>
		void main() {
			std::vector<double> myvec = {1, 2, 3};
			std::cout << tlt::minmax(myvec); // prints {1, 3}
		}
